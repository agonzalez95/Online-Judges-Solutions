/*
  Divisible Group Sums : http://uva.onlinejudge.org/index.php?option=com_onlinejudge&Itemid=8&page=show_problem&problem=1557
*/ 
#include <iostream>
#include <string.h>
#define MAXN 205
using namespace std;
typedef long long ll;

int n, m, d;
int values[MAXN];
ll dp[MAXN][12][25];

int modularF(int value, int mod){
    if(value >= 0) return value % mod;
    else return (mod + (number%mod)) % mod;
}

ll solve(int numeroActual, int cantidadNumeros, int modulo){

        if(cantidadNumeros >= m && modulo == 0) return 1;
        if(cantidadNumeros >= m && modulo != 0) return 0;
        if(numeroActual >= n && cantidadNumeros < m) return 0;

        if(dp[numeroActual][cantidadNumeros][modulo] != -1) return dp[numeroActual][cantidadNumeros][modulo];
        ll ans = 0;
        for(int i=numeroActual+1; i <= n; ++i){
            ans += solve(i, cantidadNumeros+1, modularF(modulo+values[i], d) );
        }
        return dp[numeroActual][cantidadNumeros][modulo] = ans;
}

int main()
{
    int q;
    int t=1;
    while ( cin >> n >> q){
        if (!n && !q) break;
        for(int i=1; i <= n; i++)
            cin >> values[i];

        cout << "SET " << t++ << ":" << endl;
        for(int i=1; i <= q; ++i){
            cin >> d >> m;
            memset(dp, -1, sizeof(dp));
            ll ans = solve(0, 0, 0);
            cout << "QUERY " << i << ": " <<ans << endl;

        }
    }
    return 0;
}
